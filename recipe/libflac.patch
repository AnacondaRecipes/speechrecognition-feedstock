From 41fc7bf85f91d55abb48771226b0889116cd0b74 Mon Sep 17 00:00:00 2001
From: Jan Janssen <jan.janssen@outlook.com>
Date: Sun, 12 Dec 2021 19:43:37 -0700
Subject: [PATCH] use libflac from conda

---
 setup.py                       | 23 ++++++-----------------
 speech_recognition/__init__.py | 13 +------------
 2 files changed, 7 insertions(+), 29 deletions(-)

diff --git a/setup.py b/setup.py
index acb0d04..f5161fb 100644
--- a/setup.py
+++ b/setup.py
@@ -15,25 +15,14 @@
     sys.exit(1)
 
 
-FILES_TO_MARK_EXECUTABLE = ["flac-linux-x86", "flac-linux-x86_64", "flac-mac", "flac-win32.exe"]
+def clean_up():
+    os.remove("speech_recognition/flac-linux-x86")
+    os.remove("speech_recognition/flac-linux-x86_64")
+    os.remove("speech_recognition/flac-mac")
+    os.remove("speech_recognition/flac-win32.exe")
 
 
-class InstallWithExtraSteps(install):
-    def run(self):
-        install.run(self)  # do the original install steps
-
-        # mark the FLAC executables as executable by all users (this fixes occasional issues when file permissions get messed up)
-        for output_path in self.get_outputs():
-            if os.path.basename(output_path) in FILES_TO_MARK_EXECUTABLE:
-                log.info("setting executable permissions on {}".format(output_path))
-                stat_info = os.stat(output_path)
-                os.chmod(
-                    output_path,
-                    stat_info.st_mode |
-                    stat.S_IRUSR | stat.S_IXUSR |  # owner can read/execute
-                    stat.S_IRGRP | stat.S_IXGRP |  # group can read/execute
-                    stat.S_IROTH | stat.S_IXOTH  # everyone else can read/execute
-                )
+clean_up()
 
 
 setup(
diff --git a/speech_recognition/__init__.py b/speech_recognition/__init__.py
index efa104c..59cedf8 100644
--- a/speech_recognition/__init__.py
+++ b/speech_recognition/__init__.py
@@ -1182,18 +1182,7 @@ def get_flac_converter():
     """Returns the absolute path of a FLAC converter executable, or raises an OSError if none can be found."""
     flac_converter = shutil_which("flac")  # check for installed version first
     if flac_converter is None:  # flac utility is not installed
-        base_path = os.path.dirname(os.path.abspath(__file__))  # directory of the current module file, where all the FLAC bundled binaries are stored
-        system, machine = platform.system(), platform.machine()
-        if system == "Windows" and machine in {"i686", "i786", "x86", "x86_64", "AMD64"}:
-            flac_converter = os.path.join(base_path, "flac-win32.exe")
-        elif system == "Darwin" and machine in {"i686", "i786", "x86", "x86_64", "AMD64"}:
-            flac_converter = os.path.join(base_path, "flac-mac")
-        elif system == "Linux" and machine in {"i686", "i786", "x86"}:
-            flac_converter = os.path.join(base_path, "flac-linux-x86")
-        elif system == "Linux" and machine in {"x86_64", "AMD64"}:
-            flac_converter = os.path.join(base_path, "flac-linux-x86_64")
-        else:  # no FLAC converter available
-            raise OSError("FLAC conversion utility not available - consider installing the FLAC command line application by running `apt-get install flac` or your operating system's equivalent")
+        raise OSError("FLAC conversion utility not available - consider installing the FLAC command line application by running `apt-get install flac` or your operating system's equivalent")
 
     # mark FLAC converter as executable if possible
     try:
